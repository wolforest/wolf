#!/usr/bin/env bash

# 指定需要的 Bash 最小版本号
MIN_BASH_VERSION=4.4.20

# 获取当前系统 Bash 版本号
# shellcheck disable=SC2016
CURRENT_BASH_VERSION=$(/usr/bin/env bash -c 'echo $BASH_VERSION' | cut -d' ' -f1 | cut -d'-' -f1)

# 比较 Bash 版本号与最小版本号
if awk 'BEGIN{exit !('"$CURRENT_BASH_VERSION"' < '$MIN_BASH_VERSION')};'; then
    echo "Bash version $MIN_BASH_VERSION or later is required. Please run [brew install bash] to update."
    exit 1
fi

# 关联数组在函数内定义，无法正常导出到外部使用
# define global wolf app config
declare -A wolf_app_final_name
declare -A wolf_app_dir
declare -A wolf_app_package_dir
declare -A wolf_app_test_dir
declare -A wolf_app_scp_host
declare -A wolf_app_sync_env
declare -A wolf_app_sync_command

export wolf_app_final_name
export wolf_app_dir
export wolf_app_package_dir
export wolf_app_test_dir
export wolf_app_scp_host
export wolf_app_sync_command
export wolf_app_sync_env

function define_common_const() {
    # define framework project dir
    local SCRIPT_DIR
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"

    WOLF_FRAMEWORK_DIR=$(
        cd "${SCRIPT_DIR}" || exit
        cd ../
        pwd
    )
    export WOLF_FRAMEWORK_DIR

    # define lib path
    export LIB_INSTALL_PATH="$WOLF_FRAMEWORK_DIR/bin/install.sh"
    export LIB_TEST_PATH="$WOLF_FRAMEWORK_DIR/bin/test.sh"
    export LIB_SCP_PATH="$WOLF_FRAMEWORK_DIR/bin/scp.sh"

    # define wolf framework based project dir
    WOLF_PROJECT_PARENT_DIR=$(
        cd "${WOLF_FRAMEWORK_DIR}" || exit
        cd ../
        pwd
    )
    WOLF_PROJECT_CONFIG_RELATIVE_PATH="bin/config.sh"

    export WOLF_PROJECT_PARENT_DIR
    export WOLF_PROJECT_CONFIG_RELATIVE_PATH
}

# search and load project config
function load_project_config() {
    local dirs=()
    while read -r dir; do
        if [ -e "$dir/$WOLF_PROJECT_CONFIG_RELATIVE_PATH" ]; then
            dirs+=("$dir")
        fi
    done < <(find "$WOLF_PROJECT_PARENT_DIR" -maxdepth 1 -type d)

    for dir in "${dirs[@]}"; do
        CURRENT_PROJECT_DIR=$dir
        export CURRENT_PROJECT_DIR

        config_file="$dir/$WOLF_PROJECT_CONFIG_RELATIVE_PATH"
        if [ -e "$config_file" ]; then
            # shellcheck source="$config_file"
            source "${config_file}"
        fi

        # This is may not necessary.
        install_file="$dir/bin/install.sh"
        if [ -e "$install_file" ]; then
            # shellcheck source="$install_file"
            source "$install_file"
        fi

        # This is may not necessary.
#        test_file="$dir/bin/test.sh"
#        if [ -e "$install_file" ]; then
#            echo "test_file: $test_file";
#            source "$test_file"
#        fi
    done
}

### PRINT FUNCTION
_red() {
    printf '\033[1;31;31m%b\033[0m' "$1"
}

_green() {
    printf '\033[1;31;32m%b\033[0m' "$1"
}

_yellow() {
    printf '\033[1;31;33m%b\033[0m' "$1"
}

_info() {
    _green "[INFO] "
    printf -- "%s" "$1"
    printf "\n"
}

_warn() {
    _yellow "[WARN] "
    printf -- "%s" "$1"
    printf "\n"
}

_error() {
    _red "[ ERR] "
    printf -- "%s" "$1"
    printf "\n"
    exit 1
}

function parse_opts() {
    dry_run=false
    debug_mode=false

    export dry_run
    export debug_mode

    for arg in "$@"; do
        case $arg in
        --dry-run)
            dry_run=true
            ;;
        --debug)
            debug_mode=true
            ;;
        *) ;;

        esac
    done
}

function clean() {
  echo "rm -rf ~/.m2/repository/com/wolf"
  rm -rf ~/.m2/repository/com/wolf
  echo "rm -rf ~/.m2/repository/com/one"
  rm -rf ~/.m2/repository/com/onedot/
  echo "Done."
}

function help() {
    echo "Usages:"
    echo ""
    echo "1) install (clean and install):"
    echo "  win install {app_name}"
    echo "  win install {app_name/module_name}"
    echo ""
    echo "2) release (package and sync to remote servers):"
    echo "  win release {app_name} {env}"
    echo ""
    echo "3) clean:"
    echo "  win clean"
    echo ""
}

function debug {
    local var_name="$1"
    declare -p "$var_name"
    exit
}

function main() {
    define_common_const
    parse_opts "$@"

    if [ -n "$1" ]; then
        command=$1
    else
        command="help"
    fi

    if [ "$1" != "help" ]; then
        load_project_config
    fi

    case "$command" in
    install)
        # shellcheck disable=SC1090
        source "$LIB_INSTALL_PATH"
        ;;
    test)
        # shellcheck disable=SC1090
        source "$LIB_TEST_PATH"
        ;;
    scp | sync | release)
        # shellcheck disable=SC1090
        source "$LIB_SCP_PATH"
        ;;
    clean)
        clean
        ;;
    help | *)
        help
        ;;
    esac
}

main "$@"
